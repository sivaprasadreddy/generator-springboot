buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.avast.gradle:gradle-docker-compose-plugin:0.13.4"
        classpath "org.owasp:dependency-check-gradle:6.0.3"
    }
}
plugins {
    id 'org.springframework.boot' version '<%= SPRING_BOOT_VERSION %>'
    id 'io.spring.dependency-management' version '<%= SPRING_DEP_MNGMNT_VERSION %>'
    id 'java-library'
    id "com.gorylenko.gradle-git-properties" version "2.2.4"
    id "com.github.ben-manes.versions" version "0.36.0"
    id "com.github.spotbugs" version "4.6.0" apply false
    id "org.sonarqube" version "3.0" apply false
}
apply plugin: "idea"
apply plugin: "docker-compose"
apply from: "gradle/tests.gradle"
apply from: "gradle/code-quality.gradle"
//apply from: "gradle/owasp.gradle"

group = '<%= packageName %>'
version = '<%= DEFAULT_APP_VERSION %>'
sourceCompatibility = <%= JAVA_VERSION %>
targetCompatibility = <%= JAVA_VERSION %>

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

ext {
    set('springCloudVersion', "<%= SPRING_CLOUD_VERSION %>")
    set('testcontainersVersion', "<%= TEST_CONTAINERS_VERSION %>")
    set('swaggerVersion', "<%= SWAGGER_VERSION %>")
    set('awaitilityVersion', "<%= AWAITILITY_VERSION %>")
    set('problemSpringWebVersion', "<%= PROBLEM_SPRING_WEB_VERSION %>")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    <%_ if (features.includes('localstack')) { _%>
    implementation "org.springframework.cloud:spring-cloud-starter-aws-messaging"
    <%_ } _%>
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.h2database:h2'
    <%_ if (databaseType === 'mysql') { _%>
    runtimeOnly 'mysql:mysql-connector-java'
    <%_ } _%>
    <%_ if (databaseType === 'postgresql') { _%>
    runtimeOnly 'org.postgresql:postgresql'
    <%_ } _%>
    <%_ if (databaseType === 'mariadb') { _%>
    runtimeOnly "org.mariadb.jdbc:mariadb-java-client"
    <%_ } _%>
    <%_ if (dbMigrationTool  === 'flywaydb') { _%>
    implementation 'org.flywaydb:flyway-core'
    <%_ } _%>
    <%_ if (dbMigrationTool === 'liquibase') { _%>
    implementation 'org.liquibase:liquibase-core'
    <%_ } _%>
    implementation "io.springfox:springfox-boot-starter:${swaggerVersion}"
    implementation "org.zalando:problem-spring-web-starter:${problemSpringWebVersion}"
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation "org.projectlombok:lombok"
    testImplementation "org.awaitility:awaitility:${awaitilityVersion}"
    testImplementation "org.testcontainers:junit-jupiter"
    <%_ if (databaseType === 'mysql') { _%>
    testImplementation "org.testcontainers:mysql"
    <%_ } _%>
    <%_ if (databaseType === 'postgresql') { _%>
    testImplementation "org.testcontainers:postgresql"
    <%_ } _%>
    <%_ if (databaseType === 'mariadb') { _%>
    testImplementation "org.testcontainers:mariadb"
    <%_ } _%>
    <%_ if (features.includes('localstack')) { _%>
    testImplementation "org.testcontainers:localstack"
    <%_ } _%>
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
    }
}

springBoot {
    buildInfo()
}

bootJar {
    //launchScript()
}

bootBuildImage {
    imageName = "DOCKER_USERNAME/<%= appName %>"
}

dockerCompose {
    useComposeFiles = ["docker/docker-compose.yml"]
}

compileJava.dependsOn processResources
processResources.dependsOn bootBuildInfo

bootRun {
    args = ["--spring.profiles.active=local"]
}
bootRun.dependsOn composeUp

gitProperties {
    failOnNoGitDirectory = false
    keys = ["git.branch", "git.commit.id.abbrev", "git.commit.id.describe"]
}

wrapper {
    gradleVersion = "6.7.1"
}
